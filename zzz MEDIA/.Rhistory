---
title: "Intermediate R Programming"
output:
pdf_document: default
html_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
Today we are going to go step-by-step through a typical Booth workflow for a regression problem. The steps involved will be:
**1. Loading the Data**
**2. Understanding the Data**
**3. Cleaning the Data**
**4. Performing Analysis**
**5. Visualizing the Results**
The dataset we will be working with today is the "mtcars" dataset, which comes preloaded with RStudio. You can load it anytime to practice by simply referencing it in R:
```{r}
print(mtcars)
```
I asked you to download a slightly modified version of the file to allow us to practice some fundamentals. Let's load that version into R and save it as "data":
```{r}
#The read.csv function allows us to load a comma separated values file into our R workspace
#Remember you can use the ? symbol to load the native R help files at any time!
data <- read.csv('D:\\Users\\Jeffrey\\Downloads\\mtcars_missing_data.csv')
#Note that R for Windows requires 2 "\" when calling a filepath
```
Now that we've loaded the data, the first thing we should do is make sure we understand what the data contains. Let's try a couple functions that will be helpful for doing that!
```{r}
#The str() function tells us the name of each variable in a dataset, its type, and previews some of the values
str(data)
```
```{r}
#The summary() function gives us descriptive statistics for each variable, and crucially the number of missing values!
summary(data)
```
```{r}
#If we just wanted to understand one column in the data, we could do that as well using the $ operator
summary(data$mpg)
```
**Oh no! Jeff is a jerk who has added some missing values to the data. This will ruin our analysis so we have no choice but to learn how to clean data with missings!**
First, let's identify where the missings are in our data using the is.na() function and subsetting syntax we learned last week. Let's find all missings for the mpg variable.
```{r}
#Remember, [] is used to subset. The number before the comma is the row, while the number after the comma is the column.
#If no number is provided, R assumes you want all rows/columns
data[is.na(data$mpg),]
```
knitr::opts_chunk$set(echo = TRUE)
print(mtcars)
#The read.csv function allows us to load a comma separated values file into our R workspace
#Remember you can use the ? symbol to load the native R help files at any time!
data <- read.csv('D:\\Users\\Jeffrey\\Downloads\\mtcars_missing_data.csv')
knitr::opts_chunk$set(echo = TRUE)
print(mtcars)
#The read.csv function allows us to load a comma separated values file into our R workspace
#Remember you can use the ? symbol to load the native R help files at any time!
data <- read.csv("C:\\Users\\livef\\Downloads\\mtcars_missing_data.csv")
#Note that R for Windows requires 2 "\" when calling a filepath
#The str() function tells us the name of each variable in a dataset, its type, and previews some of the values
str(data)
#The summary() function gives us descriptive statistics for each variable, and crucially the number of missing values!
summary(data)
#If we just wanted to understand one column in the data, we could do that as well using the $ operator
summary(data$mpg)
#Remember, [] is used to subset. The number before the comma is the row, while the number after the comma is the column.
#If no number is provided, R assumes you want all rows/columns
data[is.na(data$mpg),]
tail(data_non_missing,5)
data_non_missing <- data[complete.cases(data),]
tail(data_non_missing,5)
head(data_non_missing,5)
ifelse(data_non_missing$cyl > 4, 'high', 'low')
as.factor(ifelse(data_non_missing$cyl > 4, 'high', 'low'))
data_non_missing$cyl_status <- as.factor(ifelse(data_non_missing$cyl > 4, 'high', 'low'))
summary(data_non_missing$cyl_status)
hist(data_non_missing$mpg, 10)
hist(data_non_missing$mpg, 5)
hist(data_non_missing$mpg, 20)
hist(data_non_missing$mpg, 20, xlim=c(0,40))
hist(data_non_missing$mpg, xlim=c(0,40), breaks=c(15,16,20,30))
hist(data_non_missing$mpg, xlim=c(0,40), breaks=c(015,16,20,30,40))
hist(data_non_missing$mpg, xlim=c(0,40), breaks=c(0,15,16,20,30,40))
plot(data_non_missing$wt,data_non_missing$mpg)
reg <- lm(mpg~wt,data=data_non_missing)
summary(reg)
plot(data_non_missing$wt,data_non_missing$mpg)
abline(reg)
plot(data_non_missing$wt,reg$residuals)
abline(0,0)
#First lets create a squared weight term
data_non_missing$wt2 <- data_non_missing$wt^2
#Multiple linear regression is exactly the same as our prior example, except that additional variables are referenced in the formula statement with a '+' symbol, e.g. 'y ~ x1 + x2'
reg2 <- lm(mpg~wt+wt2,data=data_non_missing)
summary(reg2)
plot(data_non_missing$wt,reg2$residuals)
abline(0,0)
seq(1,6,by=0.001)
data.frame(wt = seq(1,6,by=0.001), wt2 = seq(1,6,by=0.001)^2)
predict_range$fitted<-predict(reg2,newdata=predict_range)
predict_range <- data.frame(wt = seq(1,6,by=0.001), wt2 = seq(1,6,by=0.001)^2)
#Now let's calculate the predicted mpg for each weight using the predict function
#CAUTION: It is paramount that your new_data variables have the EXACT SAME NAME as your regression model, otherwise predict WILL NOT WORK
predict_range$fitted<-predict(reg2,newdata=predict_range)
plot(data_non_missing$wt,data_non_missing$mpg)
lines(predict_range$wt,predict_range$fitted)
plot(data_non_missing$wt,data_non_missing$mpg)
lines(predict_range$wt,predict_range$fitted)
summary(lm(data_non_missing$mpg~data_non_missing$wt))
seq(1,5,by=1)
seq(1,5,by=1.5)
seq(1,5,by=.5)
wt = seq(1,6,by=0.001), wt2 = seq(1,6,by=0.001)^2
wt = seq(1,6,by=0.001)
wt
data.frame(wt = seq(1,6,by=0.001), wt2 = seq(1,6,by=0.001)^2)
summary(reg2)
reg2$coefficients
reg2$coefficients[1]
reg2$coefficients[1] + 1*reg2$coefficients[2] + 1^2*reg2$coefficients[3]
predict(reg2,newdata=data.frame(wt=1, wt2=1))
predict(reg2)
data.frame(wt=1, wt2=1)
install.packages("ggplot2")
qplot(data$mpg)
library(ggplot2)
qplot(data$mpg)
qplot(x=wt,y=mpg,data=data_non_missing)
qplot(x=wt,y=mpg,data=data)
qplot(y=mpg,x=wt,data=data_non_missing)
qplot(mpg,wt,data=data_non_missing)
qplot(x=wt,y=mpg,data=data, main = "Relationship Between MPG and Weight")
qplot(x=wt,y=mpg,data=data_non_missing, main = "Relationship Between MPG and Weight")
qplot(x=wt,y=mpg,data=data_non_missing, main = "Relationship Between MPG and Weight", xlab = "Weight", ylab = "MPG", col="blue")
qplot(x=wt,y=mpg,data=data_non_missing, main = "Relationship Between MPG and Weight", xlab = "Weight", ylab = "MPG", col="Blue")
qplot(x=wt,y=mpg,data=data_non_missing, main = "Relationship Between MPG and Weight", xlab = "Weight", ylab = "MPG", color="blue")
qplot(x=wt,y=mpg,data=data_non_missing, main = "Relationship Between MPG and Weight", xlab = "Weight", ylab = "MPG", color='blue')
qplot(x=wt,y=mpg,data=data_non_missing, main = "Relationship Between MPG and Weight", xlab = "Weight", ylab = "MPG", color='red')
ggplot(mtcars, aes(x='wt', y='mpg', color='qsec')) + \
geom_line() +\
scale_colour_gradient(low="coral", high="steelblue")
ggplot(mtcars, aes(x='wt', y='mpg', color='qsec')) +
geom_line() +
scale_colour_gradient(low="coral", high="steelblue")
qplot(x=wt,y=mpg,data=data_non_missing, main = "Relationship Between MPG and Weight", xlab = "Weight", ylab = "MPG", color='blue')
ggplot(aes(x=wt,y=mpg),data=data_non_missing)
ggplot(aes(x=wt,y=mpg),data=data_non_missing) + geom_point(data_non_missing$mpg)
ggplot(aes(x=wt,y=mpg),data=data_non_missing) + geom_point(aes(y=data_non_missing$mpg,x=data_non_missing$wt2)
)
ggplot(aes(x=wt,y=mpg),data=data_non_missing) + geom_point(aes(y=data_non_missing$mpg,x=data_non_missing$wt2))
ggplot(aes(x=wt,y=mpg),data=data_non_missing)
+ geom_point(aes(y=data_non_missing$mpg,x=data_non_missing$wt))
ggplot(aes(x=wt,y=mpg),data=data_non_missing) + geom_point(aes(y=data_non_missing$mpg,x=data_non_missing$wt2))
ggplot(aes(x=wt,y=mpg),data=data_non_missing) + geom_point(aes(y=data_non_missing$mpg,x=data_non_missing$wt2)) + geom_line(aes(y=data_non_missing$mpg,x=data_non_missing$wt2))
